/*
 * This file is generated by jOOQ.
 */
package com.example.generated.db.tables;


import com.example.generated.db.Keys;
import com.example.generated.db.Urlshortener;
import com.example.generated.db.tables.records.UrltransformationRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Urltransformation extends TableImpl<UrltransformationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>urlShortener.UrlTransformation</code>
     */
    public static final Urltransformation URLTRANSFORMATION = new Urltransformation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UrltransformationRecord> getRecordType() {
        return UrltransformationRecord.class;
    }

    /**
     * The column <code>urlShortener.UrlTransformation.originalUrl</code>.
     */
    public final TableField<UrltransformationRecord, String> ORIGINALURL = createField(DSL.name("originalUrl"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>urlShortener.UrlTransformation.shortUrl</code>.
     */
    public final TableField<UrltransformationRecord, String> SHORTURL = createField(DSL.name("shortUrl"), SQLDataType.VARCHAR(100), this, "");

    private Urltransformation(Name alias, Table<UrltransformationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Urltransformation(Name alias, Table<UrltransformationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>urlShortener.UrlTransformation</code> table
     * reference
     */
    public Urltransformation(String alias) {
        this(DSL.name(alias), URLTRANSFORMATION);
    }

    /**
     * Create an aliased <code>urlShortener.UrlTransformation</code> table
     * reference
     */
    public Urltransformation(Name alias) {
        this(alias, URLTRANSFORMATION);
    }

    /**
     * Create a <code>urlShortener.UrlTransformation</code> table reference
     */
    public Urltransformation() {
        this(DSL.name("UrlTransformation"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Urlshortener.URLSHORTENER;
    }

    @Override
    public UniqueKey<UrltransformationRecord> getPrimaryKey() {
        return Keys.KEY_URLTRANSFORMATION_PRIMARY;
    }

    @Override
    public Urltransformation as(String alias) {
        return new Urltransformation(DSL.name(alias), this);
    }

    @Override
    public Urltransformation as(Name alias) {
        return new Urltransformation(alias, this);
    }

    @Override
    public Urltransformation as(Table<?> alias) {
        return new Urltransformation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Urltransformation rename(String name) {
        return new Urltransformation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Urltransformation rename(Name name) {
        return new Urltransformation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Urltransformation rename(Table<?> name) {
        return new Urltransformation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Urltransformation where(Condition condition) {
        return new Urltransformation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Urltransformation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Urltransformation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Urltransformation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Urltransformation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Urltransformation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Urltransformation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Urltransformation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Urltransformation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Urltransformation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
